{"version":3,"sources":["Card.js","GuessCount.js","HallOfFame.js","HighScoreInput.js","App.js","reportWebVitals.js","index.js"],"names":["Card","card","feedback","index","onClick","className","GuessCount","guesses","HallOfFame","entries","map","date","id","player","HOF_KEY","HighScoreInput","props","handleWinnerUpdate","event","setState","winner","target","value","toUpperCase","persistWinner","preventDefault","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","push","splice","length","setItem","stringify","saveHOFEntry","state","onSubmit","this","autoComplete","onChange","type","Component","App","displayHallOfFame","hallOfFame","handleCardClick","currentPair","handleNewPair","cards","generateCards","matchedCardIndices","feedbacks","Array","SIDE","fill","result","candidates","from","pop","shuffle","indexMatched","includes","currentFeedback","newFeedback","newPair","newGuesses","matched","setTimeout","won","getFeedbackForCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c018490e.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\n\nimport './Card.css'\n\nconst HIDDEN_SYMBOL = '❓'\n\n/**\n * Display a card on the screen\n * @component\n * @prop {string} card Content of the card\n * @prop {string} feedback Feeback of the card (See possible feedback values in {@link Card}.propTypes)\n * @prop {number} index Index of the card\n * @prop {function} onClick Function called when the card is clicked on\n * @returns {JSX} Information to display on the screen\n */\nconst Card = ({ card, feedback, index, onClick }) => (\n        <div className={`card ${feedback}`} onClick={() => onClick(index)}>\n        <span className=\"symbol\">{feedback === 'hidden' ? HIDDEN_SYMBOL : card}</span>\n        </div>\n    )\n\nCard.propTypes = {\n    card: PropTypes.string.isRequired,\n    feedback: PropTypes.oneOf([\n        'visible',\n        'hidden',\n        'justMatched',\n        'justMismatched',\n        'disabled',\n    ]).isRequired,\n    index: PropTypes.number.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nexport default Card","import PropTypes from 'prop-types'\nimport React from 'react'\n\nimport './GuessCount.css'\n\n/**\n * Dislay the number of guesses done by the user\n * @component\n * @prop {number} guesses Number of guesses done by the user\n * @returns {JSX} Information to display on the screen\n */\nconst GuessCount = ({ guesses }) => <div className=\"guesses\">{guesses}</div>\n\n// GuessCount.defaultProps = {\n//     guesses: 0,\n// }\n\nGuessCount.propTypes = {\n    guesses: PropTypes.number.isRequired,\n}\n\nexport default GuessCount","import PropTypes from 'prop-types'\nimport React from 'react'\n\nimport './HallOfFame.css'\n\n/**\n * Display information about the winners\n * @component\n * @prop {JSON} entries Information about the winners (See values in {@link HallOfFame}.propTypes)\n * @returns {JSX} Information to display on the screen\n */\nconst HallOfFame = ({ entries }) => (\n  <table className=\"hallOfFame\">\n    <tbody>\n      {entries.map(({ date, guesses, id, player }) => (\n        <tr key={id}>\n          <td className=\"date\">{date}</td>\n          <td className=\"guesses\">{guesses}</td>\n          <td className=\"player\">{player}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n)\n\nHallOfFame.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      guesses: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      player: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n}\n\nexport default HallOfFame\n\n// ===== Internal helpers =====\n\nconst HOF_KEY = '::Memory::HallOfFame'\nconst HOF_MAX_SIZE = 10\n\n/**\n * Save information about a player\n * @param {JSON} entry Information about a player (See parameter given in code of function {@link HighScoreInput#persistWinner})\n * @param {function} onStored Function called after information is stored in order to display information about the winners (See parameter given in code of function {@link HighScoreInput#persistWinner})\n */\nexport function saveHOFEntry(entry, onStored) {\n  entry.date = new Date().toLocaleDateString()\n  entry.id = Date.now()\n\n  const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]')\n  const insertionPoint = entries.findIndex(\n    ({ guesses }) => guesses >= entry.guesses\n  )\n\n  if (insertionPoint === -1) {\n    entries.push(entry)\n  } else {\n    entries.splice(insertionPoint, 0, entry)\n  }\n  if (entries.length > HOF_MAX_SIZE) {\n    entries.splice(HOF_MAX_SIZE, entries.length)\n  }\n\n  localStorage.setItem(HOF_KEY, JSON.stringify(entries))\n  onStored(entries)\n}","import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nimport './HighScoreInput.css'\n\nimport { saveHOFEntry } from './HallOfFame'\n\n/**\n * Get winner information, save it and display it\n * @component\n * @prop {number} guesses Number of guesses done by the user\n * @prop {function} onStored Function called after information is stored in order to display information about the winners \n * @extends {Component}\n */\nclass HighScoreInput extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { winner: '' }\n    }\n    \n    /**\n     * <p>Handle onChange event from user input</p>\n     * <p>Transform lower case letters to upper case</p>\n     * @param {event} event onChange event\n     */\n    // Arrow function for binding\n    handleWinnerUpdate = event => {\n        this.setState({ winner: event.target.value.toUpperCase() })\n    }\n\n    /**\n     * <p>Handle onSubmit event after the winner submits his information</p>\n     * @param {event} event onSubmit event\n     */\n    // Arrow function for binding\n    persistWinner = event => {\n        event.preventDefault()\n        const newEntry = { guesses: this.props.guesses, player: this.state.winner }\n        saveHOFEntry(newEntry, this.props.onStored)\n    }\n\n    /**\n     * Render the winner information form\n     */\n    render() {\n        return (\n        <form className=\"highScoreInput\" onSubmit={this.persistWinner}>\n            <p>\n            <label>\n                Well done! Please enter your name:\n                <input\n                    autoComplete=\"given-name\"\n                    onChange={this.handleWinnerUpdate}\n                    type=\"text\"\n                    value={this.state.winner}\n                />\n            </label>\n            <button type=\"submit\">I have won!</button>\n            </p>\n        </form>\n        )\n    }\n}\n\nHighScoreInput.propTypes = {\n    guesses: PropTypes.number.isRequired,\n    onStored: PropTypes.func.isRequired,\n}\n\nexport default HighScoreInput","import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport Card from './Card'\nimport GuessCount from './GuessCount'\nimport HallOfFame from './HallOfFame'\nimport HighScoreInput from './HighScoreInput'\n\nconst SIDE = 6\nexport const SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\nconst VISUAL_PAUSE_MSECS = 500\n\n/**\n * Memory app\n * @component\n * @extends {Component}\n */\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cards: this.generateCards(),\n            currentPair: [],\n            guesses: 0,\n            hallOfFame: null,\n            matchedCardIndices: [],\n        }\n        /**\n         * Initialize card feedbacks as hidden at the\n         * start of the game\n         */\n        this.feedbacks = Array(SIDE * SIDE).fill('hidden')\n    }\n\n    /**\n     * <p>Display information about the winners</p>\n     * @param {HallOfFame} hallOfFame Information about the winners\n     */\n    // Arrow function for binding\n    // (i.e. to access `this` of the current object)\n    displayHallOfFame = hallOfFame => {\n        this.setState({ hallOfFame })\n        // where { hallOfFame } is shorthand for { hallOfFame: hallOfFame }\n    }\n\n    /**\n     * Generate a shuffled array of pairs of cards\n     * @return {Array} Shuffled array of pairs of cards\n     */\n    generateCards() {\n        const result = []\n        const size = SIDE * SIDE\n        const candidates = Array.from(SYMBOLS) // convert string to array of chars\n        // Keep this loop to control number of\n        // cards with variable SIDE\n        while (result.length < size) {\n            const card = candidates.pop()\n            result.push(card, card)\n        }\n        return shuffle(result)\n    }\n\n    /**\n     * <p>Get the feeback of a card</p>\n     * <p>See possible feedback values in {@link Card#propTypes}</p>\n     * @return {string} Feeback value\n     */\n    getFeedbackForCard(index) {\n        const { currentPair, matchedCardIndices } = this.state\n        const indexMatched = matchedCardIndices.includes(index)\n        let currentFeedback = this.feedbacks[index]\n        let newFeedback = ''\n\n        if (currentFeedback === 'justMatched' || currentFeedback === 'disabled') {\n            newFeedback = 'disabled'\n        }\n        else if (currentPair.length < 2) {\n            newFeedback = currentPair.includes(index) ? 'visible' : 'hidden'\n        }\n        else if (currentPair.length === 2) {\n            if (currentPair.includes(index)) {\n                newFeedback = indexMatched ? 'justMatched' : 'justMismatched'\n            }\n            else {\n                newFeedback = indexMatched ? 'visible' : 'hidden'\n            }\n        }\n        this.feedbacks[index] = newFeedback\n        return newFeedback\n    }\n    \n    /**\n     * <p>Handle event when card is clicked on</p>\n     * @param {number} index Index of the card that was clicked on\n     */\n    // Arrow function for binding\n    handleCardClick = index => {\n        const { currentPair } = this.state\n\n        // Prevent user from clicking when\n        // the current pair already contains\n        // 2 cards\n        if (currentPair.length === 2) {\n            return\n        }\n\n        if (currentPair.length === 0) {\n            this.setState({ currentPair: [index] })\n            return\n        }\n\n        this.handleNewPair(index)\n    }\n\n    /**\n     * Checking if both cards in the pair match\n     * @param {number} index Index of the card that was clicked on\n     */\n    handleNewPair(index) {\n        const { cards, currentPair, guesses, matchedCardIndices } = this.state\n\n        const newPair = [currentPair[0], index]\n        const newGuesses = guesses + 1\n        const matched = cards[newPair[0]] === cards[newPair[1]]\n        this.setState({ currentPair: newPair, guesses: newGuesses })\n        if (matched) {\n            this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\n        }\n        setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\n    }\n\n    /**\n     * Render the whole game\n     */\n    render() {\n        const { cards, guesses, hallOfFame, matchedCardIndices } = this.state\n        // Game is won when there are as many matched cards as there are cards\n        // in the game\n        const won = matchedCardIndices.length === 4 //cards.length\n        return ( \n            <div className=\"memory\">\n            {/* <span>{`Seconds ${new Date().getSeconds()}`}</span> */}\n            <GuessCount guesses={guesses} />\n            { cards.map((card, index) => ( \n              <Card card={card}\n                  feedback={this.getFeedbackForCard(index)}\n                  key={index} // key must be unique and stable in time\n                  index={index}\n                  onClick={this.handleCardClick}\n              />\n            ))}\n            {won && (hallOfFame ? ( <HallOfFame entries={hallOfFame} />\n                    ) : ( <HighScoreInput\n                          guesses={guesses}\n                          onStored={this.displayHallOfFame}\n                        />\n                    ))\n            }\n            </div>\n        )\n    }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}