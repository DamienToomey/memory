import React from 'react'

import { expect } from 'chai'
import { shallow } from 'enzyme'
import sinon from 'sinon'

import App, { SYMBOLS, VISUAL_PAUSE_MSECS } from '../../App'
import Card from '../../Card'
import BUFFER_MSECS from '../unit/App.test'

describe('<App />', () => {
    it('should trigger Card `onKeyPress` prop when card has focus and key is pressed', () => {
        const cards = [...SYMBOLS.repeat(2)]
        const stub = sinon
            .stub(App, 'generateCards')
            .returns(cards)

        const clock = sinon.useFakeTimers()

        // Workaround test because `enzyme-adapter-react-16` and
        // `react 17` are not compatible so I cannot use `mount`
        // so I use shallow

        // "Currently, event simulation for the shallow renderer
        // does not propagate as one would normally expect in a
        // real environment. As a result, one must call .simulate()
        // on the actual node that has the event handler set."
        // Enzyme Documentation:
        // https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/simulate.html

        // In order to write this test, I generate two dummy Cards and I pass
        // handleCardClick and handleKeyPress from an App instance.
        // I can then simulate events on the dummy Cards. These events will in fact
        // be thrown on the Cards generated by App and not on the dymmy Cards

        try {
            const wrapper = shallow(<App />)
            const app = wrapper.instance()
            const wrapperCard0 = shallow(
                <Card
                    card="A symbol" // this will not the symbol of the card at index 0 in <App />
                    feedback="hidden"
                    index={0}
                    onClick={app.handleCardClick}
                    onKeyPress={app.handleKeyPress}
                />,
            )
            const wrapperCard1 = shallow(
                <Card
                    card="Another symbol" // this will not be be symbol of the card at index 1 in <App />
                    feedback="hidden"
                    index={1} // workarounw as Tab event does not work
                    onClick={app.handleCardClick}
                    onKeyPress={app.handleKeyPress}
                />,
            )

            let index = 0
            const enterKeyEvent = new KeyboardEvent('keypress', { key: 'Enter' })

            expect(wrapper.find('Card').at(index)).to.have.props(['feedback']).deep.equal(['hidden'])
            wrapperCard0.simulate('keypress', enterKeyEvent)
            // ideally, with mount, we would be able to do:
            // wrapper.simulate('keypress', { key: 'Tab' }) // set the focus on the first card
            // wrapper.simulate('keypress', enterKeyEvent)
            expect(wrapper.find('Card').at(index)).to.have.props(['feedback']).deep.equal(['visible'])
            expect(wrapper.find('GuessCount')).to.have.props({ guesses: 0 })

            index = 1
            expect(wrapper.find('Card').at(index)).to.have.props(['feedback']).deep.equal(['hidden'])
            wrapperCard1.simulate('keypress', enterKeyEvent)
            expect(wrapper.find('Card').at(index)).to.have.props(['feedback']).deep.equal(['justMismatched'])
            expect(wrapper.find('GuessCount')).to.have.props({ guesses: 1 })

            clock.tick(VISUAL_PAUSE_MSECS + BUFFER_MSECS)
            expect(wrapper.find('Card').at(0)).to.have.props(['feedback']).deep.equal(['hidden'])
            expect(wrapper.find('Card').at(1)).to.have.props(['feedback']).deep.equal(['hidden'])
        } finally {
            stub.restore()
            clock.restore()
        }
    })
})
